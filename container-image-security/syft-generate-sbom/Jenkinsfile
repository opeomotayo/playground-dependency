pipeline {
  agent {
    kubernetes {
      label 'default maven build-pod'
      defaultContainer 'docker'
      yamlFile 'build-pod.yaml'
    }
  }

  environment {
    DOCKER_HUB=credentials('dockerhub-cred')
    IMAGE_NAME='opeomotayo/java-image'
    IMAGE_VERSION='latest'
    COSIGN_PASSWORD=credentials('cosign-password')
    COSIGN_PRIVATE_KEY=credentials('cosign-private-key')
    COSIGN_PUBLIC_KEY=credentials('cosign-public-key')
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '3'))
  }

  stages {
    stage('Delete Image If Exists') {
      steps {
          sh 'docker rmi $IMAGE_NAME:$IMAGE_VERSION || (echo "Image $IMAGE_NAME:$IMAGE_VERSION does not exist so not removed."; exit 0)'
          sh 'docker system prune -a --volumes --force'
      }
    }
    stage('Create Container Image') {
      steps {
        dir('container-image-security/syft-generate-sbom'){
          sh 'docker build --tag $IMAGE_NAME:$IMAGE_VERSION .'
          sh 'docker image ls'
        }
      }
    }
    stage('Publish Image') {
      steps {
        sh 'echo "$DOCKER_HUB_PSW" | docker login -u $DOCKER_HUB_USR --password-stdin'
        sh 'docker push $IMAGE_NAME:$IMAGE_VERSION'
      }
    }
    stage('Generate SBOM (formats: json, spdx & cyclonedx)') {
      steps {
        dir('container-image-security/syft-generate-sbom'){
          container('security-tools'){
            sh 'echo "$DOCKER_HUB_PSW" | docker login -u $DOCKER_HUB_USR --password-stdin'
            // sh 'syft packages $IMAGE_NAME:$IMAGE_VERSION --scope AllLayers'
            // sh 'syft packages $IMAGE_NAME:$IMAGE_VERSION --scope AllLayers -o spdx > ./java-image-sbom.spdx' //json, cyclonedx or -vv
            sh 'syft $IMAGE_NAME:$IMAGE_VERSION -o json=java-image-sbom.json -o spdx-json=java-image-sbom.spdx -o cyclonedx=java-image-sbom.cyclonedx'
            sh 'cat ./java-image-sbom.json'
            sh 'cat ./java-image-sbom.spdx'
            sh 'cat ./java-image-sbom.cyclonedx'
          }
        }
      }
    }
    stage('Attest Image with Syft') {
      steps {
        dir('container-image-security/syft-generate-sbom'){
          container('security-tools'){
            sh 'echo "$DOCKER_HUB_PSW" | docker login -u $DOCKER_HUB_USR --password-stdin'
            sh 'syft attest --key $COSIGN_PRIVATE_KEY $IMAGE_NAME:$IMAGE_VERSION -o cyclonedx-json > ./java-image-sbom.att.json'
          }
        }
      }
    }
    stage('Scan SBOM from Attestation') {
      steps {
        dir('container-image-security/syft-generate-sbom'){
          container('security-tools'){
            sh 'echo "$DOCKER_HUB_PSW" | docker login -u $DOCKER_HUB_USR --password-stdin'
            sh 'grype att:./java-image-sbom.att.json --key $COSIGN_PUBLIC_KEY' //--fail-on=critical //grype ./java-image-sbom.att.json --key $COSIGN_PUBLIC_KEY
          }
        }
      }
    }
    // stage('Does WireFrame Exist?') {
    //   steps {
    //     dir('container-image-security/syft-generate-sbom'){
    //       container('security-tools'){
    //         script {
    //           def WireFrameFound = sh(returnStatus:true,script:'''
    //               cat ./java-image-sbom.spdx | jq -e '.artifacts[] | select(.name =="WireFrame")'
    //             ''')
    //           if(WireFrameFound == 0) {
    //             error(message:"WireFrame was found in the SBOM. It should not be there.")
    //           }
    //         }
    //       }
    //     }
    //   }
    // }
    stage('Attach Attestation to Image') {
      steps {
        dir('container-image-security/syft-generate-sbom'){
          container('security-tools'){
            sh 'echo "$DOCKER_HUB_PSW" | docker login -u $DOCKER_HUB_USR --password-stdin'
            sh 'cosign attach attestation $IMAGE_NAME:$IMAGE_VERSION --attestation ./java-image-sbom.att.json'
          }
        }
      }
    }
    stage('Verify your SBOM Attestation') {
      steps {
        dir('container-image-security/syft-generate-sbom'){
          container('security-tools'){
            sh 'echo "$DOCKER_HUB_PSW" | docker login -u $DOCKER_HUB_USR --password-stdin'
            sh 'cosign verify-attestation $IMAGE_NAME:$IMAGE_VERSION --key $COSIGN_PUBLIC_KEY'
          }
        }
      }
    }
    stage('Finally done') {
      steps {
        echo 'if I made it here, no WireFrame was found'
      }
    }

  }
}