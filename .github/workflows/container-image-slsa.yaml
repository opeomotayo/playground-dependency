name: Container Image SLSA

on:
  push:
    branches: [ "master" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    
env:
  REGISTRY: docker.io
  IMAGE_NAME: opeomotayo/shared-services

jobs:
  image_build_and_publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image: ${{ steps.build-and-push.outputs.image }}
      digest: ${{ steps.build-and-push.outputs.digest }}
      tags: ${GITHUB_REF_NAME} #,$(git rev-parse "${GITHUB_REF_NAME:-HEAD}")"  #${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_HUB }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.1.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
             
      # Build and push Docker image with Buildx (don't push on PR)
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3.2.0
        with:
          context: ./container-image-security/app-image
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image
        id: image-output
        run: |
          # NOTE: Set the image as an output because the `env` context is not
          # available to the inputs of a reusable workflow call.
          image_name="${REGISTRY}/${IMAGE_NAME}"
          echo "::set-output name=image::$image_name"
    
  image_sign_and_sbom_attest:
    runs-on: ubuntu-latest
    needs: [image_build_and_publish]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Log into registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_HUB }}

      - name: Install Syft and Generate SBOM
        id: sbom
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.image_build_and_publish.outputs.digest }}
          artifact-name: sbom-spdx.json
          output-file: sbom-spdx.json

      - name: Install CoSign and Sign Published Image
        if: ${{ github.event_name != 'pull_request' }}
        uses: sigstore/cosign-installer@v2.8.0
        with:
          cosign-release: 'v1.13.0'
      - name: Write signing/private key to disk
        run: 'echo "$KEY" > cosign.key'
        shell: bash
        env:
          KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      - name: Sign image
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --key cosign.key {}@${{ needs.image_build_and_publish.outputs.digest }}

      - name: Sign the SBOM
        if: ${{ github.event_name != 'pull_request' }}
        uses: sigstore/cosign-installer@v2.8.0
        with:
          cosign-release: 'v1.13.0'
      - name: Write signing/private key to disk
        run: 'echo "$KEY" > cosign.key'
        shell: bash
        env:
          KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      - name: Attest SBOM
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          cosign attest --key cosign.key --predicate sbom-spdx.json --type spdxjson "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.image_build_and_publish.outputs.digest }}"
  
  # This step calls the container workflow to generate provenance and push it to the container registry.
  generate_and_publish_provenance:
    runs-on: ubuntu-latest
    needs: [image_build_and_publish]
    permissions:
      actions: read
      contents: read
      packages: write

    steps:
      - name: Log into registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_HUB }}

      - name: Install CoSign and Sign Published Image
        if: ${{ github.event_name != 'pull_request' }}
        uses: sigstore/cosign-installer@v2.8.0
        with:
          cosign-release: 'v1.13.0'

      - name: Write signing/private key to disk
        run: 'echo "$KEY" > cosign.key'
        shell: bash
        env:
          KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: Write signing/public key to diskk
        run: 'echo "$KEY" > cosign.pubkey'
        shell: bash
        env:
          KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}

      - name: Generate provenance
        uses: philips-labs/slsa-provenance-action@v0.7.2
        with:
          command: generate
          subcommand: container
          arguments: --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" --output-path provenance.att --digest "${{ needs.image_build_and_publish.outputs.digest }}" --tags "${{ needs.image_build_and_publish.outputs.tags }}"
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          GITHUB_TOKEN: "${{ secrets.DOCKER_HUB }}"
          IMAGE_TAGS: ${{ needs.image_build_and_publish.outputs.tags }}

      - name: Attach provenance
        run: |
          jq '.predicate' provenance.att > provenance-predicate.att
          cosign attest --key cosign.pubkey --predicate provenance-predicate.att --type slsaprovenance  "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.image_build_and_publish.outputs.digest }}"
          # echo "::notice title=Verify provenance attestation cosign verify-attestation --key cosign.pubkey ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.image_build_and_publish.outputs.digest }} | jq '.payload |= @base64d | .payload | fromjson | select(.predicateType == \"https://slsa.dev/provenance/v0.2\")'"