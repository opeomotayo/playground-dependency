name: Container Image SLSA

on:
  push:
    branches: [ "master" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    
env:
  REGISTRY: docker.io
  IMAGE_NAME: opeomotayo/shared-services

jobs:
  image_build_and_publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build-and-push.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_HUB }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.1.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
             
      # Build and push Docker image with Buildx (don't push on PR)
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3.2.0
        with:
          context: ./container-image-security/app-image
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image
        id: image-output
        run: |
          # NOTE: Set the image as an output because the `env` context is not
          # available to the inputs of a reusable workflow call.
          image_name="${REGISTRY}/${IMAGE_NAME}"
          echo "::set-output name=image::$image_name"
    
  image_sign_and_verify:
    runs-on: ubuntu-latest
    needs: [image_build_and_publish]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Log into registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_HUB }}

      - name: Install Syft and Generate SBOM
        id: sbom
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.image_build_and_publish.outputs.digest }}
          artifact-name: sbom-spdx.json
          output-file: sbom-spdx.json

      # - name: Install CoSign and Sign Published Image
      #   if: ${{ github.event_name != 'pull_request' }}
      #   uses: sigstore/cosign-installer@v2.8.0
      #   with:
      #     cosign-release: 'v1.13.0'
      # - name: Write signing key to disk
      #   run: 'echo "$KEY" > cosign.key'
      #   shell: bash
      #   env:
      #     KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      #   run: |
      #     echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --key cosign.key {}@${{ needs.image_build_and_publish.outputs.digest }}

      # - name: Sign the SBOM
      #   if: ${{ github.event_name != 'pull_request' }}
      # - name: Install cosign
      #   uses: sigstore/cosign-installer@v2.8.0
      #   with:
      #     cosign-release: 'v1.13.0'
      # - name: Write signing key to disk
      #   run: 'echo "$KEY" > cosign.key'
      #   shell: bash
      #   env:
      #     KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      #   run: |
      #     cosign attest --key cosign.key --predicate sbom-spdx.json --type spdxjson "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.image_build_and_publish.outputs.digest }}"

  #     - name: cosign-installer
  #       uses: sigstore/cosign-installer@main 
  #     - name: Write signing key to disk
  #       run: 'echo "$KEY" > cosign.key'
  #       shell: bash
  #       env:
  #         KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
  #     - name: Sign the published Docker image
  #       env:
  #         COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
  #       run: |
  #         cosign sign --key cosign.key -a "author=OpeOmotayo" ${{ env.IMAGE_FULL_URL }}   
  #     - name: Write signing key to disk
  #       run: 'echo "$KEY" > cosign.pubkey'
  #       shell: bash
  #       env:
  #         KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
  #     - name: Verify the published Docker image
  #       env:
  #         COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
  #       run: | 
  #         echo "::notice title=Verify signature cosign verify --key cosign.pubkey ${{ env.IMAGE_FULL_URL }}| jq '.[0]'"
  #         echo "::notice title=Inspect signature bundle cosign verify --key cosign.pubkey ${{ env.IMAGE_FULL_URL }} | jq '.[0].optional.Bundle.Payload.body |= @base64d | .[0].optional.Bundle.Payload.body | fromjson'"
  #         echo "::notice title=Inspect certificate cosign verify --key cosign.pubkey ${{ env.IMAGE_FULL_URL }} | jq -r '.[0].optional.Bundle.Payload.body |= @base64d | .[0].optional.Bundle.Payload.body | fromjson | .spec.signature.publicKey.content |= @base64d | .spec.signature.publicKey.content' | openssl x509 -text"

  # sbom_generate_attest_and_verify_attestation:
  #   runs-on: ubuntu-latest
  #   needs: [image_build]

  #   permissions:
  #     contents: read
  #     packages: write

  #   env:
  #     IMAGE_FULL_URL: ${{ needs.image_build.outputs.image-full-url }} #ghcr.io/opeomotayo/shared-services:339232682
  #     IMAGE_DIGEST: ${{ needs.image_build.outputs.image-digest }} #sha256:4e5a6d443387626b082a5c42141894d2da4ca598b6afa998697fc20a501bd9aa

    # steps:
      # - name: cosign-installer
      #   uses: sigstore/cosign-installer@main
      # - name: Install Syft
      #   uses: anchore/sbom-action/download-syft@v0.7.0
      # - name: Login to ghcr.io
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      # - name: Write signing key to disk
      #   run: 'echo "$KEY" > cosign.key'
      #   shell: bash
      #   env:
      #     KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      # - name: Attach SBOM to image
      #   env:
      #     COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      #   run: |
      #     syft "${{ env.IMAGE_FULL_URL }}" -o spdx-json=sbom-spdx.json
      #     # cosign attest --key cosign.key --predicate sbom-spdx.json --type spdx ${IMAGE_NAME}@${IMAGE_DIGEST}
      #     # echo "::notice title=Verify SBOM attestation cosign verify-attestation --key cosign.key ${{ env.IMAGE_FULL_URL }}"
      #     # echo "::notice title=Download SBOM attestation cosign download attestation --key cosign.key ${{ env.IMAGE_FULL_URL }}" | jq '.payload |= @base64d | .payload | fromjson | select(.predicateType == \"https://spdx.dev/Document\") | .predicate.Data | fromjson'"
  

      # - name: Generate SBOM
      #   id: sbom
      #   uses: anchore/sbom-action@v0
      #   with:
      #     image: ${{ env.IMAGE_FULL_URL }}
      #     artifact-name: sbom-spdx.json
      #     output-file: sbom-spdx.json
      # - name: Sign the published Docker image
      #   if: ${{ github.event_name != 'pull_request' }}
      # - name: Write signing key to disk
      #   run: 'echo "$KEY" > cosign.key'
      #   shell: bash
      #   env:
      #     KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      #   run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --key cosign.key {}@${{ steps.build-and-push.outputs.digest }}